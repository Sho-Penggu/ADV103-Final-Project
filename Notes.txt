
@api_view(['GET'])
def getRoutes(request):
    routes = [
        {
            'Endpoint': '/sanction/',
            'method': 'GET',
            'body': None,
            'description': 'Returns an array of notes'
        },
        {
            'Endpoint': '/sanction/id',
            'method': 'GET',
            'body': None,
            'description': 'Returns a single note object'
        },
        {
            'Endpoint': '/sanction/create/',
            'method': 'POST',
            'body': {'body': ""},
            'description': 'Creates new note with data sent in post request'
        },
        {
            'Endpoint': '/sanction/id/update/',
            'method': 'PUT',
            'body': {'body': ""},
            'description': 'Creates an existing note with data sent in post request'
        },
        {
            'Endpoint': '/sanction/id/delete/',
            'method': 'DELETE',
            'body': None,
            'description': 'Deletes and exiting note'
        },
    ]
    return Response(routes)



class GetSanctions(APIView):
    permission_classes = (permissions.IsAuthenticated,)
    authentication_classes = (SessionAuthentication,)
    ##
    def get(self, request):
        sanctions = Sanction.objects.all()
        serializer = SanctionSerializer(sanctions, many=True)
        return Response(serializer.data)

class GetSanctionID(APIView):
    permission_classes = (permissions.IsAuthenticated,)
    authentication_classes = (SessionAuthentication,)
    def get(self, request, pk):
        sanctions = Sanction.objects.get(id=pk)
        serializer = SanctionSerializer(sanctions, many=False)
        return Response(serializer.data)

class UpdateSanction(APIView):
    permission_classes = (permissions.IsAuthenticated,)
    authentication_classes = (SessionAuthentication,)
    def put(self, request, pk):
        data = request.data
        sanction = Sanction.objects.get(id=pk)
        serializer = SanctionSerializer(instance=sanction, data=data)

        if serializer.is_valid():
            serializer.save()

        return Response(serializer.data)


def put(self, request, pk, format=None):
        sanction = self.serializer_class.Meta.model.objects.get(id=pk)
        serializer = SanctionSerializer(sanction, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    
    def patch(self, request, pk, format=None):
        sanction = self.serializer_class.Meta.model.objects.get(id=pk)
        serializer = SanctionSerializer(sanction, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
