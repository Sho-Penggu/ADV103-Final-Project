
@api_view(['GET'])
def getRoutes(request):
    routes = [
        {
            'Endpoint': '/sanction/',
            'method': 'GET',
            'body': None,
            'description': 'Returns an array of notes'
        },
        {
            'Endpoint': '/sanction/id',
            'method': 'GET',
            'body': None,
            'description': 'Returns a single note object'
        },
        {
            'Endpoint': '/sanction/create/',
            'method': 'POST',
            'body': {'body': ""},
            'description': 'Creates new note with data sent in post request'
        },
        {
            'Endpoint': '/sanction/id/update/',
            'method': 'PUT',
            'body': {'body': ""},
            'description': 'Creates an existing note with data sent in post request'
        },
        {
            'Endpoint': '/sanction/id/delete/',
            'method': 'DELETE',
            'body': None,
            'description': 'Deletes and exiting note'
        },
    ]
    return Response(routes)



class GetSanctions(APIView):
    permission_classes = (permissions.IsAuthenticated,)
    authentication_classes = (SessionAuthentication,)
    ##
    def get(self, request):
        sanctions = Sanction.objects.all()
        serializer = SanctionSerializer(sanctions, many=True)
        return Response(serializer.data)

class GetSanctionID(APIView):
    permission_classes = (permissions.IsAuthenticated,)
    authentication_classes = (SessionAuthentication,)
    def get(self, request, pk):
        sanctions = Sanction.objects.get(id=pk)
        serializer = SanctionSerializer(sanctions, many=False)
        return Response(serializer.data)

class UpdateSanction(APIView):
    permission_classes = (permissions.IsAuthenticated,)
    authentication_classes = (SessionAuthentication,)
    def put(self, request, pk):
        data = request.data
        sanction = Sanction.objects.get(id=pk)
        serializer = SanctionSerializer(instance=sanction, data=data)

        if serializer.is_valid():
            serializer.save()

        return Response(serializer.data)


def put(self, request, pk, format=None):
        sanction = self.serializer_class.Meta.model.objects.get(id=pk)
        serializer = SanctionSerializer(sanction, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    
    def patch(self, request, pk, format=None):
        sanction = self.serializer_class.Meta.model.objects.get(id=pk)
        serializer = SanctionSerializer(sanction, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


/* HOME.js */


      <section className="table__body">
        <table>
          <thead>
            <tr>
              <th> Id </th>
              <th> Name</th>
              <th> Date </th>
              <th> Time </th>
              <th> Subject & Section</th>
              <th> Lab </th>
              <th> Reason </th>
              <th> Action </th>
              <th>
                <button onClick={functionopenpopup} color="primary" variant="contained">
                  <img src={addIcon} alt="Icon" />
                </button>
              </th>
              <Dialog open={open} onClose={closepopup} fullWidth maxWidth="sm">
                <DialogTitle>Sanctioned Student Info
                  <IconButton onClick={closepopup} style={{ float: 'right' }}>
                    <CloseIcon color="primary" />
                  </IconButton>
                </DialogTitle>
                <DialogContent>
                  <Stack spacing={2} margin={2}>
                    <TextField variant="outlined" label="Name">
                      {sanctions.map((sanction, index) => (
                        <span key={index}>{sanction.body}</span>
                      ))}
                    </TextField>
                    <TextField variant="outlined" label="Date"></TextField>
                    <TextField variant="outlined" label="Time"></TextField>
                    <TextField variant="outlined" label="Subject & Section"></TextField>
                    <TextField
                      id="outlined-select-lab"
                      select
                      label="Lab"
                      defaultValue="1"
                    >
                      {lab.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </TextField>
                    <TextField
                      id="outlined-select-reason"
                      select
                      label="Reason"
                    >
                      {reason.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </TextField>
                    <Button
                      style={{
                        backgroundColor: '#2B3467',
                        color: '#f8f9fa',
                        fontSize: '1.5rem',
                        borderRadius: '10px',
                        fontWeight: 'bold',
                      }}
                      variant="contained"
                    >
                      Submit
                    </Button>
                  </Stack>
                </DialogContent>
                <DialogActions></DialogActions>
              </Dialog>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td> 1 </td>
              <td>
                {sanctions.map((sanction, index) => (
                  <span key={index}>{sanction.body}</span>
                ))}
              </td>
              <td> Nov 25, 2023 </td>
              <td> 2:34 PM </td>
              <td> ADV 103-3B </td>
              <td> 3 </td>
              <td>
                <p className="status cancelled">Facebook</p>
              </td>
              <td>
                <button onClick={() => (1)}>
                  <img src={deleteIcon} alt="Icon" />
                </button>
                <button style={{ marginLeft: '10px' }} onClick={() => (1)}>
                  <img src={editIcon} alt="Icon" />
                </button>
              </td>
              <td> </td>
            </tr>

            <tr>
              <td> 2 </td>
              <td> Albert Villarmia </td>
              <td> Nov 27, 2023 </td>
              <td> 5:34 PM </td>
              <td> SIA 101-3B </td>
              <td> 2 </td>
              <td>
                <p className="status cancelled">Games</p>
              </td>
              <td>
                <button onClick={() => (1)}>
                  <img src={deleteIcon} alt="Icon" />
                </button>
                <button style={{ marginLeft: '10px' }} onClick={() => (1)}>
                  <img src={editIcon} alt="Icon" />
                </button>
              </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </section>



useEffect(() => {
    getSanctions();
  }, []);


const getSanctions = async () => {
    try {
      let response = await fetch('api/home');
      let data = await response.json();
      console.log('DATA:', data);
      setSanctions(data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

Model:
class Sanction(models.Model):
    id = models.AutoField(primary_key=True)
    body = models.TextField(null=True, blank=True)
    updated = models.DateTimeField(auto_now=True)
    created = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.body[0:50]



Views:

class Sanction(ModelViewSet):
    permission_classes = (permissions.IsAuthenticated,)
    authentication_classes = (SessionAuthentication,)
    serializer_class = SanctionSerializer
    
    def get_queryset(self):
        return self.serializer_class.Meta.model.objects.all()
    
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)
    
    def post(self, request, format=None):
        serializer = SanctionSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    def put(self, request, pk, format=None):
        sanction = get_object_or_404(self.serializer_class.Meta.model, id=pk)
        serializer = SanctionSerializer(sanction, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def patch(self, request, pk, format=None):
        sanction = get_object_or_404(self.serializer_class.Meta.model, id=pk)
        serializer = SanctionSerializer(sanction, data=request.data, partial=True)  # Make sure to set partial=True for PATCH
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    def get(self, request, pk, *args, **kwargs):
        try:
            article = self.serializer_class.Meta.model.objects.get(id=pk)
            serliazer = self.serializer_class(article)
            return Response(serliazer.data)
        except self.serializer_class.Meta.model.DoesNotExist:
            return Response(status=status.HTTP_400_BAD_REQUEST)
        
    def delete(self, request, pk, *args, **kwargs):
        try:
            self.serializer_class.Meta.model.objects.get(id=pk).delete()
            return Response(status=status.HTTP_200_OK)
        except self.serializer_class.Meta.model.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)



Home.js

const postData = async () => {
    try {
      const data = { 
        body: inputValue,
      }; // Ensure inputValue has the intended data
      const response = await client.post('/api/home', data);
      
      if (response.status === 200) {
        console.log('Data posted successfully:', response.data);
        // Handle success, if needed
      } else {
        console.error('Failed to post data:', response.data);
        // Handle errors, if needed
      }
    } catch (error) {
      console.error('Error posting data:', error);
      // Handle errors, if needed
    }
  };

